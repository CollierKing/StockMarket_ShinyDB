input2$price_cross_50 <- ifelse(input2$adjusted<input2$ma50,"under","over")
# 9 vs MAs
## Above 21 sma Cross
input2$ma9_cross_21_up <- ifelse(input2$ma9>input2$ma21 & lag(input2$ma9,n=1) < lag(input2$ma21,n=1),1,NA)
## Below 21 sma Cross
input2$ma9_cross_21_dn <- ifelse(input2$ma9<input2$ma21 & lag(input2$ma9,n=1) > lag(input2$ma21,n=1),1,NA)
# 9 vs 21 ma
input2$ma9_cross_21 <- ifelse(input2$ma9<input2$ma21,"under","over")
## Above 50 sma Cross
input2$ma9_cross_50_up <- ifelse(input2$ma9>input2$ma50 & lag(input2$ma9,n=1) < lag(input2$ma50,n=1),1,NA)
## Below 50 sma Cross
input2$ma9_cross_50_dn <- ifelse(input2$ma9<input2$ma50 & lag(input2$ma9,n=1) > lag(input2$ma50,n=1),1,NA)
# 9 vs 50 ma
input2$ma9_cross_50 <- ifelse(input2$ma9<input2$ma50,"under","over")
# 21 vs MAs
## Above 9 sma Cross
input2$ma21_cross_9_up <- ifelse(input2$ma21>input2$ma9 & lag(input2$ma21,n=1) < lag(input2$ma9,n=1),1,NA)
## Below 9 sma Cross
input2$ma21_cross_9_dn <- ifelse(input2$ma21<input2$ma9 & lag(input2$ma21,n=1) > lag(input2$ma9,n=1),1,NA)
# 21 vs 9 ma
input2$ma21_cross_9 <- ifelse(input2$ma21<input2$ma9,"under","over")
## Above 50 sma Cross
input2$ma21_cross_50_up <- ifelse(input2$ma21>input2$ma50 & lag(input2$ma21,n=1) < lag(input2$ma50,n=1),1,NA)
## Below 50 sma Cross
input2$ma21_cross_50_dn <- ifelse(input2$ma21<input2$ma50 & lag(input2$ma21,n=1) > lag(input2$ma50,n=1),1,NA)
# 21 vs 50 ma
input2$ma21_cross_50 <- ifelse(input2$ma21<input2$ma50,"under","over")
# 50 vs MAs
## Above 9 sma Cross
input2$ma50_cross_9_up <- ifelse(input2$ma50>input2$ma9 & lag(input2$ma50,n=1) < lag(input2$ma9,n=1),1,NA)
## Below 9 sma Cross
input2$ma50_cross_9_dn <- ifelse(input2$ma50<input2$ma9 & lag(input2$ma50,n=1) > lag(input2$ma9,n=1),1,NA)
# 50 vs 9 ma
input2$ma50_cross_9 <- ifelse(input2$ma50<input2$ma9,"under","over")
## Above 21 sma Cross
input2$ma50_cross_21_up <- ifelse(input2$ma50>input2$ma21 & lag(input2$ma50,n=1) < lag(input2$ma21,n=1),1,NA)
## Below 21 sma Cross
input2$ma50_cross_21_dn <- ifelse(input2$ma50<input2$ma21 & lag(input2$ma50,n=1) > lag(input2$ma21,n=1),1,NA)
# 50 vs 21 ma
input2$ma50_cross_21 <- ifelse(input2$ma50<input2$ma21,"under","over")
#MACD cross
input2$macd_cross_up <- ifelse(input2$macd>input2$signal & lag(input2$macd,n=1) < lag(input2$signal,n=1),1,NA)
input2$macd_cross_dn <- ifelse(input2$macd<input2$signal & lag(input2$macd,n=1) > lag(input2$signal,n=1),1,NA)
input2$macd_cross <- ifelse(input2$macd<input2$signal,"under","over")
#RSI Quantile
perc.rank <- function(x) trunc(rank(x,na.last = NA))/sum(!is.na(x))
xr <- perc.rank((input2$RSI))
xr_add <- rep(NA,nrow(input2)-length(xr))
xr <- c(xr_add,xr)
input2$RSI_q <- xr
q_cuts <- seq(0,1,.2)
input2$RSI_q_bins <- cut(input2$RSI_q,q_cuts,right=FALSE,include.lowest = TRUE)
### MA CROSS SERIES
######################
events = c("price_cross_9_up","price_cross_9_dn","price_cross_21_up","price_cross_21_dn","price_cross_50_up",
"price_cross_50_dn","ma9_cross_21_up","ma9_cross_21_dn","ma9_cross_50_up","ma9_cross_50_dn",
"ma21_cross_9_up","ma21_cross_9_dn","ma21_cross_50_up","ma21_cross_50_dn","ma50_cross_9_up",
"ma50_cross_9_dn","ma50_cross_21_up","ma50_cross_21_dn","macd_cross_up","macd_cross_dn")
# Drag down event counters per occurance
for(j in 1:length(events)){
event = events[j]
counter = 0
for (i in 1:nrow(input2)){
if(!is.na(input2[,event][i])){
counter = counter + 1
}
input2[,event][i] = counter
}
}
comp = substr(event,1,nchar(event)-3)
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'"))
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n()) %>%
filter (return !=0) %>% # filter out erroneous crosses (where opposite cross happened)
summarise(total_occurances = n(),
avg_max_return = mean(return,na.rm=TRUE),
avg_max_day = mean(max_day),
avg_tot_days = mean(tot_days)) -> summ_tbl
View(summ_tbl)
comp = substr(event,1,nchar(event)-3)
comp = substr(event,1,nchar(event)-3)
comp_tbl = event_summ_all() %>% filter_(paste(comp, "== 'over'"))
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'")) #for debugging
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins))  %>%
filter (return !=0) -> event_summ_tbl
View(event_summ_tbl)
event <- 'price_cross_9_up'
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins))  %>%
filter (return !=0) -> event_summ_tbl
View(event_summ_tbl)
View(input2)
event
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'")) #for debugging
View(comp_tbl)
comp
event
comp = substr(event,1,nchar(event)-3)
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'")) #for debugging
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins))  %>%
filter (return !=0) -> event_summ_tbl
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)","\\NA"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","black"))
g2 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = max_day, fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Days") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)","\\NA"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","black"))
grid.arrange(g1,g2,p1,widths=c(1/4,1/4,1/2))
grid.arrange(g1,g2,widths=c(1/4,1/4))
event_summ_tbl[is.na(event_summ_tbl$rsi_q),]$rsi_q <- "N/A"
event_summ_tbl[is.na(event_summ_tbl$rsi_q),]
event_summ_tbl[is.na(event_summ_tbl$rsi_q),]$rsi_q <- "-"
event_summ_tbl[is.na(event_summ_tbl$rsi_q),]$rsi_q[1] <- "-"
facna <- addNA(event_summ_tbl$rsi_q)
levels(facna) <- c(levels(event_summ_tbl$rsi_q), "N/A")
event_summ_tbl$rsi_q <- factor(ifelse(is.na(event_summ_tbl$rsi_q), 88, paste(event_summ_tbl$rsi_q)), levels = c(levels(event_summ_tbl$rsi_q), "N/A"))
event_summ_tbl$rsi_q <- factor(ifelse(is.na(event_summ_tbl$rsi_q), "N/A", paste(event_summ_tbl$rsi_q)), levels = c(levels(event_summ_tbl$rsi_q), "N/A"))
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins))  %>%
filter (return !=0) -> event_summ_tbl
str(event_summ_tbl)
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = ifelse(!is.na(first(RSI_q_bins),first(RSI_q_bins,"N/A")))  %>%
filter (return !=0) -> event_summ_tbl
View(event_summ_tbl)
comp = substr(event,1,nchar(event)-3)
# comp_tbl = event_summ_all() %>% filter_(paste(comp, "== 'over'"))
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'")) #for debugging
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = ifelse(!is.na(first(RSI_q_bins),first(RSI_q_bins,"N/A")))  %>%
filter (return !=0) -> event_summ_tbl
View(event_summ_tbl)
comp = substr(event,1,nchar(event)-3)
# comp_tbl = event_summ_all() %>% filter_(paste(comp, "== 'over'"))
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'")) #for debugging
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = ifelse(!is.na(first(RSI_q_bins),first(RSI_q_bins,"N/A")))  %>%
filter (return !=0) -> event_summ_tbl
View(event_summ_tbl)
View(event_summ_tbl)
View(event_summ_tbl)
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = ifelse(!is.na(first(RSI_q_bins)),first(RSI_q_bins,"N/A"))  %>%
filter (return !=0) -> event_summ_tbl
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = ifelse(!is.na(first(RSI_q_bins)),first(RSI_q_bins,"N/A")))  %>%
filter (return !=0) -> event_summ_tbl
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = ifelse(!is.na(first(RSI_q_bins)),first(RSI_q_bins),"N/A"))  %>%
filter (return !=0) -> event_summ_tbl
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins))  %>%
filter (return !=0) -> event_summ_tbl
View(event_summ_tbl)
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)",NA),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","black"))
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4"))
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4"))
g1
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins))  %>%
filter (return !=0) -> event_summ_tbl
# filter out erroneous crosses (where opposite cross happened)
event_summ_tbl[[event]] <- as.numeric(row.names(event_summ_tbl))
event_summ_tbl[[event]] <- as.factor(event_summ_tbl[[event]])
#compute mean & standard deviations (return)
return_mean <- mean(event_summ_tbl$return)
return_sd <- sd(event_summ_tbl$return)
#compute mean & standard deviations (days)
day_mean <- mean(event_summ_tbl$max_day)
day_sd <- sd(event_summ_tbl$max_day)
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4"))
g1
View(comp_tbl)
str(comp_tbl)
comp_tbl$RSI_q_bins <- as.character(comp_tbl$RSI_q_bins)
comp_tbl[is.na(comp_tbl$RSI_q_bins),] <- "NULL"
comp_tbl$RSI_q_bins <- ifelse(is.na(comp_tbl$RSI_q_bins),"NULL",comp_tbl$RSI_q_bins)
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins))  %>%
filter (return !=0) -> event_summ_tbl
View(event_summ_tbl)
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)","NULL"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","black"))
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","black"))
g1
comp = substr(event,1,nchar(event)-3)
# comp_tbl = event_summ_all() %>% filter_(paste(comp, "== 'over'"))
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'")) #for debugging
comp_tbl$RSI_q_bins <- as.character(comp_tbl$RSI_q_bins)
comp_tbl$RSI_q_bins <- ifelse(is.na(comp_tbl$RSI_q_bins),"NULL",comp_tbl$RSI_q_bins)
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins))  %>%
filter (return !=0) -> event_summ_tbl
# filter out erroneous crosses (where opposite cross happened)
event_summ_tbl[[event]] <- as.numeric(row.names(event_summ_tbl))
event_summ_tbl[[event]] <- as.factor(event_summ_tbl[[event]])
#compute mean & standard deviations (return)
return_mean <- mean(event_summ_tbl$return)
return_sd <- sd(event_summ_tbl$return)
#compute mean & standard deviations (days)
day_mean <- mean(event_summ_tbl$max_day)
day_sd <- sd(event_summ_tbl$max_day)
# event_summ_tbl$return = event_summ_tbl$return*100
# test_tbl <- event_summ_tbl %>%
#     gather() %>%
#     filter(key %in% c("max_day","return"))
# test_tbl$ID <- seq.int(nrow(event_summ_tbl))
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","black"))
g1
comp = substr(event,1,nchar(event)-3)
# comp_tbl = event_summ_all() %>% filter_(paste(comp, "== 'over'"))
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'")) #for debugging
# comp_tbl$RSI_q_bins <- as.character(comp_tbl$RSI_q_bins)
# comp_tbl$RSI_q_bins <- ifelse(is.na(comp_tbl$RSI_q_bins),"NULL",comp_tbl$RSI_q_bins)
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins))  %>%
filter (return !=0) -> event_summ_tbl
# filter out erroneous crosses (where opposite cross happened)
event_summ_tbl[[event]] <- as.numeric(row.names(event_summ_tbl))
event_summ_tbl[[event]] <- as.factor(event_summ_tbl[[event]])
#compute mean & standard deviations (return)
return_mean <- mean(event_summ_tbl$return)
return_sd <- sd(event_summ_tbl$return)
#compute mean & standard deviations (days)
day_mean <- mean(event_summ_tbl$max_day)
day_sd <- sd(event_summ_tbl$max_day)
# event_summ_tbl$return = event_summ_tbl$return*100
# test_tbl <- event_summ_tbl %>%
#     gather() %>%
#     filter(key %in% c("max_day","return"))
# test_tbl$ID <- seq.int(nrow(event_summ_tbl))
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","grey"))
g2 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = max_day, fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Days") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","grey"))
g1
g2
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","grey"))
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","grey"))
g1
g1
comp = substr(event,1,nchar(event)-3)
# comp_tbl = event_summ_all() %>% filter_(paste(comp, "== 'over'"))
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'")) #for debugging
comp_tbl$RSI_q_bins <- as.character(comp_tbl$RSI_q_bins)
comp_tbl$RSI_q_bins <- ifelse(is.na(comp_tbl$RSI_q_bins),"NULL",comp_tbl$RSI_q_bins)
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins))  %>%
filter (return !=0) -> event_summ_tbl
# filter out erroneous crosses (where opposite cross happened)
event_summ_tbl[[event]] <- as.numeric(row.names(event_summ_tbl))
event_summ_tbl[[event]] <- as.factor(event_summ_tbl[[event]])
#compute mean & standard deviations (return)
return_mean <- mean(event_summ_tbl$return)
return_sd <- sd(event_summ_tbl$return)
#compute mean & standard deviations (days)
day_mean <- mean(event_summ_tbl$max_day)
day_sd <- sd(event_summ_tbl$max_day)
# event_summ_tbl$return = event_summ_tbl$return*100
# test_tbl <- event_summ_tbl %>%
#     gather() %>%
#     filter(key %in% c("max_day","return"))
# test_tbl$ID <- seq.int(nrow(event_summ_tbl))
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
theme(axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() + theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","grey"))
g1
