Strike <- out$Strike[i]
Type <- as.character(out$OptionType[i])
#Enter DB query for FV companies
#-----------------------------------------------
#connect to db
mydb <- dbConnect(MySQL(),user="david",password="barkley07",host="localhost")
dbSendQuery(mydb,"USE stocks")
#pull tickers in table
fvQuery <- dbSendQuery(mydb,"SELECT Ticker, SysDate FROM stocks.fvcompanies ORDER BY SysDate DESC")
fvTickerList <- fetch(fvQuery,n=-1)
# fvTickerList <- as.data.frame(unique(fvTickerList$Ticker))
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#  fvtest <- data.frame(matrix(nrow = 1,ncol = 2))
#  colnames(fvtest) <- c("Ticker","SysDate")
# #
#  fvtest$Ticker[1] <- "AAPL"
#  fvtest$SysDate[1] <- "2016-01-16"
#
#  fvTickerList <- rbind(fvTickerList,fvtest)
View(out)
for (i in 1:nrow(out)) {
#Pull Ticker Prices
Ticker <- out$Ticker[i]
# Ticker <- "AAPL"
print(Ticker)
date <- out$ExpDate[i]
Strike <- out$Strike[i]
Type <- as.character(out$OptionType[i])
#Enter DB query for FV companies
#-----------------------------------------------
#connect to db
mydb <- dbConnect(MySQL(),user="david",password="barkley07",host="localhost")
dbSendQuery(mydb,"USE stocks")
#pull tickers in table
fvQuery <- dbSendQuery(mydb,"SELECT Ticker, SysDate FROM stocks.fvcompanies ORDER BY SysDate DESC")
fvTickerList <- fetch(fvQuery,n=-1)
# fvTickerList <- as.data.frame(unique(fvTickerList$Ticker))
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#  fvtest <- data.frame(matrix(nrow = 1,ncol = 2))
#  colnames(fvtest) <- c("Ticker","SysDate")
# #
#  fvtest$Ticker[1] <- "AAPL"
#  fvtest$SysDate[1] <- "2016-01-16"
#
#  fvTickerList <- rbind(fvTickerList,fvtest)
#company table search & if ticker not in table then execute FV query
if (Ticker %in% fvTickerList$Ticker==TRUE){
try(fvTickerQ <- fvTickerList[fvTickerList$Ticker == Ticker,],silent = FALSE)
try(fvTickerMax <- as.Date(max(fvTickerQ$SysDate)),silent = FALSE)
try(dateDiff <- as.numeric(Sys.Date()-fvTickerMax),silent = FALSE)
#if it was over 100 days since the DB was refreshed for this ticker, then run query
if((dateDiff>100)==TRUE){
try(rm(fvResult),silent=FALSE)
#execute FV query if ticker is not in fvcompanies table
website <- "http://finviz.com/quote.ashx?t="
try(fvResult <- readHTMLTable(paste0(website,Ticker)),silent = FALSE)
#If the web query pulls back information then execute:
if(exists("fvResult")==TRUE){
# transform list into df
try(fin_hl <- fvResult[[4]], silent = FALSE)
try(fin_hl <- fin_hl[14:nrow(fin_hl),], silent = FALSE)
try(df <- data.frame(Category=character(0), Value=character(0)),silent = FALSE)
for(i in 1:(ncol(fin_hl)/2)) {
try(tmp <- fin_hl[,((i-1)*2+1):(i*2)], silent = FALSE)
try(names(tmp) <- c("Category","Value"), silent = FALSE)
try(df <- rbind(df, tmp), silent = FALSE)
}
try(row.names(df) <- 1:nrow(df), silent = FALSE)
try(x <- df$Category, silent = FALSE)
try(df2 <- as.data.frame(t(df)), silent = FALSE)
try(colnames(df2) <- x, silent = FALSE)
try(df2 <- df2[-1,], silent = FALSE)
try(df2$Sys.Date <- as.Date(Sys.Date(),format="%m/%d/%Y"), silent = FALSE)
try(df2$Ticker <- Ticker, silent = FALSE)
try(df2 <- df2[,c(ncol(df2),1:(ncol(df2)-1))], silent = FALSE)
#clear MySQL connection
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#Enter DB query for table column names
fvCols <- dbSendQuery(mydb,"SELECT * FROM stocks.fvcompanies LIMIT 1")
data <- fetch(fvCols,n=-1)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#copy column names from table to fvQuery result df
names(df2) <- names(data)
#Append df to fvcompanies table
try(dbWriteTable(mydb, name="fvcompanies", value=df2 , append=TRUE, row.names=FALSE, overwrite=FALSE), silent = FALSE)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
}
}
#Else: if the ticker isnt in the DB, then execute the query
} else {
#execute FV query if ticker is not in fvcompanies table
website <- "http://finviz.com/quote.ashx?t="
try(rm(fvResult),silent=FALSE)
try(fvResult <- readHTMLTable(paste0(website,Ticker)),silent = FALSE)
#If the web query pulls back information then execute:
if(exists("fvResult")==TRUE){
# transform list into df
try(fin_hl <- fvResult[[4]], silent = FALSE)
try(fin_hl <- fin_hl[14:nrow(fin_hl),], silent = FALSE)
try(df <- data.frame(Category=character(0), Value=character(0)),silent = FALSE)
for(i in 1:(ncol(fin_hl)/2)) {
try(tmp <- fin_hl[,((i-1)*2+1):(i*2)], silent = FALSE)
try(names(tmp) <- c("Category","Value"), silent = FALSE)
try(df <- rbind(df, tmp), silent = FALSE)
}
try(row.names(df) <- 1:nrow(df), silent = FALSE)
try(x <- df$Category, silent = FALSE)
try(df2 <- as.data.frame(t(df)), silent = FALSE)
try(colnames(df2) <- x, silent = FALSE)
try(df2 <- df2[-1,], silent = FALSE)
try(df2$Sys.Date <- as.Date(Sys.Date(),format="%m/%d/%Y"), silent = FALSE)
try(df2$Ticker <- Ticker, silent = FALSE)
try(df2 <- df2[,c(ncol(df2),1:(ncol(df2)-1))], silent = FALSE)
#clear MySQL connection
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#Enter DB query for table column names
fvCols <- dbSendQuery(mydb,"SELECT * FROM stocks.fvcompanies LIMIT 1")
data <- fetch(fvCols,n=-1)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#copy column names from table to fvQuery result df
names(df2) <- names(data)
#Append df to fvcompanies table
try(dbWriteTable(mydb, name="fvcompanies", value=df2 , append=TRUE, row.names=FALSE, overwrite=FALSE), silent = FALSE)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
}
}
#QUANTMOD StockPrice Query
#-------------------------------
try(stockPrice <- getQuote(Ticker, what = yahooQuote.EOD), silent = FALSE)
# try(stockPrice <- getQuote("GRMN", what = yahooQuote.EOD), silent = FALSE)
try(out$startOpen[i] <- stockPrice$Open, silent = FALSE)
try(out$startLow[i] <- stockPrice$Low, silent = FALSE)
try(out$startHigh[i] <- stockPrice$High, silent = FALSE)
try(out$startClose[i] <- stockPrice$Close, silent = FALSE)
try(out$startDayDelt[i] <- (stockPrice$Close - stockPrice$Open)/stockPrice$Open,silent = FALSE)
##NASDAQ EARNINGS QUERY
#-------------------------------
url <- paste0("http://www.nasdaq.com/earnings/report/", Ticker)
# get the html data and convert it to a data.frame
try(earnings <- url %>% read_html() %>%
html_nodes(xpath = '//*[@id="two_column_main_content_reportdata"]') %>%
html_text() %>% data.frame(),silent = FALSE)
#extract earnings date from text
try(x <- max(unlist(str_locate_all(pattern ="report earnings on", earnings$.))+3), silent = FALSE)
try(earnings2 <- substr(earnings$.,x,x+16), silent = FALSE)
try(earnings3 <- as.data.frame(str_split(earnings2," ",2)), silent = FALSE)
try(EarningsDate <- as.character(earnings3[1,]), silent = FALSE)
try(EarningsDate <- gsub(" ","",EarningsDate), silent = FALSE)
try(EarningsDate <- gsub("[.]","",EarningsDate), silent = FALSE)
try(EarningsDate <- as.character(strptime(EarningsDate,"%m/%d/%Y")), silent = FALSE)
try(EarningsTime <- as.character(earnings3[2,]), silent = FALSE)
try(EarningsTime <- gsub(" ","",EarningsTime), silent = FALSE)
if (is.na(EarningsDate)==TRUE){
try(out$EarningsDate[i] <- NA)
try(out$EarningsTime[i] <- NA)
} else {
try(out$EarningsDate[i] <- as.character(EarningsDate), silent = FALSE)
try(out$EarningsTime[i] <- as.character(EarningsTime), silent = FALSE)
}
##END LOOP
try(dbDisconnect(mydb),silent = FALSE)
}
earnings
try(earnings <- url %>% read_html() %>%
html_nodes(xpath = '//*[@id="two_column_main_content_reportdata"]') %>%
html_text() %>% data.frame(),silent = FALSE)
try(x <- max(unlist(str_locate_all(pattern ="report earnings on", earnings$.))+3), silent = FALSE)
try(earnings2 <- substr(earnings$.,x,x+16), silent = FALSE)
try(earnings3 <- as.data.frame(str_split(earnings2," ",2)), silent = FALSE)
try(EarningsDate <- as.character(earnings3[1,]), silent = FALSE)
try(EarningsDate <- gsub(" ","",EarningsDate), silent = FALSE)
try(EarningsDate <- gsub("[.]","",EarningsDate), silent = FALSE)
try(EarningsDate <- as.character(strptime(EarningsDate,"%m/%d/%Y")), silent = FALSE)
try(EarningsTime <- as.character(earnings3[2,]), silent = FALSE)
try(EarningsTime <- gsub(" ","",EarningsTime), silent = FALSE)
if (is.na(EarningsDate)==TRUE){
try(out$EarningsDate[i] <- NA)
try(out$EarningsTime[i] <- NA)
} else {
try(out$EarningsDate[i] <- as.character(EarningsDate), silent = FALSE)
try(out$EarningsTime[i] <- as.character(EarningsTime), silent = FALSE)
}
View(out)
for (i in 1:nrow(out)) {
#Pull Ticker Prices
Ticker <- out$Ticker[i]
# Ticker <- "AAPL"
print(Ticker)
date <- out$ExpDate[i]
Strike <- out$Strike[i]
Type <- as.character(out$OptionType[i])
#Enter DB query for FV companies
#-----------------------------------------------
#connect to db
mydb <- dbConnect(MySQL(),user="david",password="barkley07",host="localhost")
dbSendQuery(mydb,"USE stocks")
#pull tickers in table
fvQuery <- dbSendQuery(mydb,"SELECT Ticker, SysDate FROM stocks.fvcompanies ORDER BY SysDate DESC")
fvTickerList <- fetch(fvQuery,n=-1)
# fvTickerList <- as.data.frame(unique(fvTickerList$Ticker))
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#  fvtest <- data.frame(matrix(nrow = 1,ncol = 2))
#  colnames(fvtest) <- c("Ticker","SysDate")
# #
#  fvtest$Ticker[1] <- "AAPL"
#  fvtest$SysDate[1] <- "2016-01-16"
#
#  fvTickerList <- rbind(fvTickerList,fvtest)
#company table search & if ticker not in table then execute FV query
if (Ticker %in% fvTickerList$Ticker==TRUE){
try(fvTickerQ <- fvTickerList[fvTickerList$Ticker == Ticker,],silent = FALSE)
try(fvTickerMax <- as.Date(max(fvTickerQ$SysDate)),silent = FALSE)
try(dateDiff <- as.numeric(Sys.Date()-fvTickerMax),silent = FALSE)
#if it was over 100 days since the DB was refreshed for this ticker, then run query
if((dateDiff>100)==TRUE){
try(rm(fvResult),silent=FALSE)
#execute FV query if ticker is not in fvcompanies table
website <- "http://finviz.com/quote.ashx?t="
try(fvResult <- readHTMLTable(paste0(website,Ticker)),silent = FALSE)
#If the web query pulls back information then execute:
if(exists("fvResult")==TRUE){
# transform list into df
try(fin_hl <- fvResult[[4]], silent = FALSE)
try(fin_hl <- fin_hl[14:nrow(fin_hl),], silent = FALSE)
try(df <- data.frame(Category=character(0), Value=character(0)),silent = FALSE)
for(i in 1:(ncol(fin_hl)/2)) {
try(tmp <- fin_hl[,((i-1)*2+1):(i*2)], silent = FALSE)
try(names(tmp) <- c("Category","Value"), silent = FALSE)
try(df <- rbind(df, tmp), silent = FALSE)
}
try(row.names(df) <- 1:nrow(df), silent = FALSE)
try(x <- df$Category, silent = FALSE)
try(df2 <- as.data.frame(t(df)), silent = FALSE)
try(colnames(df2) <- x, silent = FALSE)
try(df2 <- df2[-1,], silent = FALSE)
try(df2$Sys.Date <- as.Date(Sys.Date(),format="%m/%d/%Y"), silent = FALSE)
try(df2$Ticker <- Ticker, silent = FALSE)
try(df2 <- df2[,c(ncol(df2),1:(ncol(df2)-1))], silent = FALSE)
#clear MySQL connection
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#Enter DB query for table column names
fvCols <- dbSendQuery(mydb,"SELECT * FROM stocks.fvcompanies LIMIT 1")
data <- fetch(fvCols,n=-1)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#copy column names from table to fvQuery result df
names(df2) <- names(data)
#Append df to fvcompanies table
try(dbWriteTable(mydb, name="fvcompanies", value=df2 , append=TRUE, row.names=FALSE, overwrite=FALSE), silent = FALSE)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
}
}
#Else: if the ticker isnt in the DB, then execute the query
} else {
#execute FV query if ticker is not in fvcompanies table
website <- "http://finviz.com/quote.ashx?t="
try(rm(fvResult),silent=FALSE)
try(fvResult <- readHTMLTable(paste0(website,Ticker)),silent = FALSE)
#If the web query pulls back information then execute:
if(exists("fvResult")==TRUE){
# transform list into df
try(fin_hl <- fvResult[[4]], silent = FALSE)
try(fin_hl <- fin_hl[14:nrow(fin_hl),], silent = FALSE)
try(df <- data.frame(Category=character(0), Value=character(0)),silent = FALSE)
for(i in 1:(ncol(fin_hl)/2)) {
try(tmp <- fin_hl[,((i-1)*2+1):(i*2)], silent = FALSE)
try(names(tmp) <- c("Category","Value"), silent = FALSE)
try(df <- rbind(df, tmp), silent = FALSE)
}
try(row.names(df) <- 1:nrow(df), silent = FALSE)
try(x <- df$Category, silent = FALSE)
try(df2 <- as.data.frame(t(df)), silent = FALSE)
try(colnames(df2) <- x, silent = FALSE)
try(df2 <- df2[-1,], silent = FALSE)
try(df2$Sys.Date <- as.Date(Sys.Date(),format="%m/%d/%Y"), silent = FALSE)
try(df2$Ticker <- Ticker, silent = FALSE)
try(df2 <- df2[,c(ncol(df2),1:(ncol(df2)-1))], silent = FALSE)
#clear MySQL connection
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#Enter DB query for table column names
fvCols <- dbSendQuery(mydb,"SELECT * FROM stocks.fvcompanies LIMIT 1")
data <- fetch(fvCols,n=-1)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#copy column names from table to fvQuery result df
names(df2) <- names(data)
#Append df to fvcompanies table
try(dbWriteTable(mydb, name="fvcompanies", value=df2 , append=TRUE, row.names=FALSE, overwrite=FALSE), silent = FALSE)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
}
}
#QUANTMOD StockPrice Query
#-------------------------------
try(stockPrice <- getQuote(Ticker, what = yahooQuote.EOD), silent = FALSE)
# try(stockPrice <- getQuote("GRMN", what = yahooQuote.EOD), silent = FALSE)
try(out$startOpen[i] <- stockPrice$Open, silent = FALSE)
try(out$startLow[i] <- stockPrice$Low, silent = FALSE)
try(out$startHigh[i] <- stockPrice$High, silent = FALSE)
try(out$startClose[i] <- stockPrice$Close, silent = FALSE)
try(out$startDayDelt[i] <- (stockPrice$Close - stockPrice$Open)/stockPrice$Open,silent = FALSE)
##NASDAQ EARNINGS QUERY
#-------------------------------
url <- paste0("http://www.nasdaq.com/earnings/report/", Ticker)
# get the html data and convert it to a data.frame
try(earnings <- url %>% read_html() %>%
html_nodes(xpath = '//*[@id="two_column_main_content_reportdata"]') %>%
html_text() %>% data.frame(),silent = FALSE)
#extract earnings date from text
try(x <- max(unlist(str_locate_all(pattern ="report earnings on", earnings$.))+3), silent = FALSE)
try(earnings2 <- substr(earnings$.,x,x+16), silent = FALSE)
try(earnings3 <- as.data.frame(str_split(earnings2," ",2)), silent = FALSE)
try(EarningsDate <- as.character(earnings3[1,]), silent = FALSE)
try(EarningsDate <- gsub(" ","",EarningsDate), silent = FALSE)
try(EarningsDate <- gsub("[.]","",EarningsDate), silent = FALSE)
try(EarningsDate <- as.character(strptime(EarningsDate,"%m/%d/%Y")), silent = FALSE)
try(EarningsTime <- as.character(earnings3[2,]), silent = FALSE)
try(EarningsTime <- gsub(" ","",EarningsTime), silent = FALSE)
if (is.na(EarningsDate)==TRUE){
try(out$EarningsDate[i] <- NA)
try(out$EarningsTime[i] <- NA)
} else {
try(out$EarningsDate[i] <- as.character(EarningsDate), silent = FALSE)
try(out$EarningsTime[i] <- as.character(EarningsTime), silent = FALSE)
}
##END LOOP
try(dbDisconnect(mydb),silent = FALSE)
}
Ticker <- "AAPL"
url <- paste0("http://www.nasdaq.com/earnings/report/", Ticker)
# get the html data and convert it to a data.frame
try(earnings <- url %>% read_html() %>%
html_nodes(xpath = '//*[@id="two_column_main_content_reportdata"]') %>%
html_text() %>% data.frame(),silent = FALSE)
for (i in 1:nrow(out)) {
#Pull Ticker Prices
Ticker <- out$Ticker[i]
# Ticker <- "AAPL"
print(Ticker)
date <- out$ExpDate[i]
Strike <- out$Strike[i]
Type <- as.character(out$OptionType[i])
#Enter DB query for FV companies
#-----------------------------------------------
#connect to db
mydb <- dbConnect(MySQL(),user="david",password="barkley07",host="localhost")
dbSendQuery(mydb,"USE stocks")
#pull tickers in table
fvQuery <- dbSendQuery(mydb,"SELECT Ticker, SysDate FROM stocks.fvcompanies ORDER BY SysDate DESC")
fvTickerList <- fetch(fvQuery,n=-1)
# fvTickerList <- as.data.frame(unique(fvTickerList$Ticker))
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#  fvtest <- data.frame(matrix(nrow = 1,ncol = 2))
#  colnames(fvtest) <- c("Ticker","SysDate")
# #
#  fvtest$Ticker[1] <- "AAPL"
#  fvtest$SysDate[1] <- "2016-01-16"
#
#  fvTickerList <- rbind(fvTickerList,fvtest)
#company table search & if ticker not in table then execute FV query
if (Ticker %in% fvTickerList$Ticker==TRUE){
try(fvTickerQ <- fvTickerList[fvTickerList$Ticker == Ticker,],silent = FALSE)
try(fvTickerMax <- as.Date(max(fvTickerQ$SysDate)),silent = FALSE)
try(dateDiff <- as.numeric(Sys.Date()-fvTickerMax),silent = FALSE)
#if it was over 100 days since the DB was refreshed for this ticker, then run query
if((dateDiff>100)==TRUE){
try(rm(fvResult),silent=FALSE)
#execute FV query if ticker is not in fvcompanies table
website <- "http://finviz.com/quote.ashx?t="
try(fvResult <- readHTMLTable(paste0(website,Ticker)),silent = FALSE)
#If the web query pulls back information then execute:
if(exists("fvResult")==TRUE){
# transform list into df
try(fin_hl <- fvResult[[4]], silent = FALSE)
try(fin_hl <- fin_hl[14:nrow(fin_hl),], silent = FALSE)
try(df <- data.frame(Category=character(0), Value=character(0)),silent = FALSE)
for(i in 1:(ncol(fin_hl)/2)) {
try(tmp <- fin_hl[,((i-1)*2+1):(i*2)], silent = FALSE)
try(names(tmp) <- c("Category","Value"), silent = FALSE)
try(df <- rbind(df, tmp), silent = FALSE)
}
try(row.names(df) <- 1:nrow(df), silent = FALSE)
try(x <- df$Category, silent = FALSE)
try(df2 <- as.data.frame(t(df)), silent = FALSE)
try(colnames(df2) <- x, silent = FALSE)
try(df2 <- df2[-1,], silent = FALSE)
try(df2$Sys.Date <- as.Date(Sys.Date(),format="%m/%d/%Y"), silent = FALSE)
try(df2$Ticker <- Ticker, silent = FALSE)
try(df2 <- df2[,c(ncol(df2),1:(ncol(df2)-1))], silent = FALSE)
#clear MySQL connection
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#Enter DB query for table column names
fvCols <- dbSendQuery(mydb,"SELECT * FROM stocks.fvcompanies LIMIT 1")
data <- fetch(fvCols,n=-1)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#copy column names from table to fvQuery result df
names(df2) <- names(data)
#Append df to fvcompanies table
try(dbWriteTable(mydb, name="fvcompanies", value=df2 , append=TRUE, row.names=FALSE, overwrite=FALSE), silent = FALSE)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
}
}
#Else: if the ticker isnt in the DB, then execute the query
} else {
#execute FV query if ticker is not in fvcompanies table
website <- "http://finviz.com/quote.ashx?t="
try(rm(fvResult),silent=FALSE)
try(fvResult <- readHTMLTable(paste0(website,Ticker)),silent = FALSE)
#If the web query pulls back information then execute:
if(exists("fvResult")==TRUE){
# transform list into df
try(fin_hl <- fvResult[[4]], silent = FALSE)
try(fin_hl <- fin_hl[14:nrow(fin_hl),], silent = FALSE)
try(df <- data.frame(Category=character(0), Value=character(0)),silent = FALSE)
for(i in 1:(ncol(fin_hl)/2)) {
try(tmp <- fin_hl[,((i-1)*2+1):(i*2)], silent = FALSE)
try(names(tmp) <- c("Category","Value"), silent = FALSE)
try(df <- rbind(df, tmp), silent = FALSE)
}
try(row.names(df) <- 1:nrow(df), silent = FALSE)
try(x <- df$Category, silent = FALSE)
try(df2 <- as.data.frame(t(df)), silent = FALSE)
try(colnames(df2) <- x, silent = FALSE)
try(df2 <- df2[-1,], silent = FALSE)
try(df2$Sys.Date <- as.Date(Sys.Date(),format="%m/%d/%Y"), silent = FALSE)
try(df2$Ticker <- Ticker, silent = FALSE)
try(df2 <- df2[,c(ncol(df2),1:(ncol(df2)-1))], silent = FALSE)
#clear MySQL connection
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#Enter DB query for table column names
fvCols <- dbSendQuery(mydb,"SELECT * FROM stocks.fvcompanies LIMIT 1")
data <- fetch(fvCols,n=-1)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
#copy column names from table to fvQuery result df
names(df2) <- names(data)
#Append df to fvcompanies table
try(dbWriteTable(mydb, name="fvcompanies", value=df2 , append=TRUE, row.names=FALSE, overwrite=FALSE), silent = FALSE)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
}
}
#QUANTMOD StockPrice Query
#-------------------------------
try(stockPrice <- getQuote(Ticker, what = yahooQuote.EOD), silent = FALSE)
# try(stockPrice <- getQuote("GRMN", what = yahooQuote.EOD), silent = FALSE)
try(out$startOpen[i] <- stockPrice$Open, silent = FALSE)
try(out$startLow[i] <- stockPrice$Low, silent = FALSE)
try(out$startHigh[i] <- stockPrice$High, silent = FALSE)
try(out$startClose[i] <- stockPrice$Close, silent = FALSE)
try(out$startDayDelt[i] <- (stockPrice$Close - stockPrice$Open)/stockPrice$Open,silent = FALSE)
##NASDAQ EARNINGS QUERY
#-------------------------------
# url <- paste0("http://www.nasdaq.com/earnings/report/", Ticker)
#
# # get the html data and convert it to a data.frame
# try(earnings <- url %>% read_html() %>%
#       html_nodes(xpath = '//*[@id="two_column_main_content_reportdata"]') %>%
#       html_text() %>% data.frame(),silent = FALSE)
#
# #extract earnings date from text
#
# try(x <- max(unlist(str_locate_all(pattern ="report earnings on", earnings$.))+3), silent = FALSE)
# try(earnings2 <- substr(earnings$.,x,x+16), silent = FALSE)
# try(earnings3 <- as.data.frame(str_split(earnings2," ",2)), silent = FALSE)
#
# try(EarningsDate <- as.character(earnings3[1,]), silent = FALSE)
# try(EarningsDate <- gsub(" ","",EarningsDate), silent = FALSE)
# try(EarningsDate <- gsub("[.]","",EarningsDate), silent = FALSE)
# try(EarningsDate <- as.character(strptime(EarningsDate,"%m/%d/%Y")), silent = FALSE)
#
# try(EarningsTime <- as.character(earnings3[2,]), silent = FALSE)
# try(EarningsTime <- gsub(" ","",EarningsTime), silent = FALSE)
#
# if (is.na(EarningsDate)==TRUE){
#
try(out$EarningsDate[i] <- NA)
try(out$EarningsTime[i] <- NA)
#
# } else {
#
#   try(out$EarningsDate[i] <- as.character(EarningsDate), silent = FALSE)
#   try(out$EarningsTime[i] <- as.character(EarningsTime), silent = FALSE)
#
# }
##END LOOP
try(dbDisconnect(mydb),silent = FALSE)
}
##WRITE TABLE TO DB
mydb <- dbConnect(MySQL(),user="david",password="barkley07",host="localhost")
dbSendQuery(mydb,"USE stocks")
try(dbWriteTable(mydb, name="trades", value=out , append=TRUE, row.names=FALSE, overwrite=FALSE), silent = FALSE)
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
setwd("C:\\Users\\David\\Dropbox\\Skills\\R\\Projects\\Options\\Output\\Speedy\\StockOnly")
currentDate <- Sys.Date()
csvFileName <- paste("SpeedyCalls",currentDate,"_trades",".csv")
write.csv(out, file = csvFileName)
#Added 5/7/2017
#Save entire trades DB to Google Drive for backup
#connect to db
mydb <- dbConnect(MySQL(),user="david",password="barkley07",host="localhost")
dbSendQuery(mydb,"USE stocks")
#pull tickers in table
Query <- dbSendQuery(mydb,"SELECT * FROM stocks.trades")
alltrades <- fetch(Query,n=-1)
Query2 <- dbSendQuery(mydb,"SELECT * FROM stocks.fvcompanies")
allcos <- fetch(Query2,n=-1)
# fvTickerList <- as.data.frame(unique(fvTickerList$Ticker))
try(dbClearResult(dbListResults(mydb)[[1]]),silent = FALSE)
setwd("C:\\Users\\David\\Google Drive\\Stocks\\db_backups\\stocks")
write.csv(alltrades,file = "all_trades.csv",row.names = FALSE)
write.csv(allcos,file="all_cos.csv",row.names = FALSE)
#added 7-23-2017 for github repo access
# setwd("C:\\Users\\David\\Google Drive\\Stocks\\db_backups\\stocks")
setwd("C:\\Users\\David\\Dropbox\\Skills\\R\\Projects\\StockMarket_ShinyDB")
write.csv(alltrades,file = "all_trades.csv",row.names = FALSE)
shell.exec("C:\\Users\\David\\Desktop\\batch\\stock_data_upload.bat")
