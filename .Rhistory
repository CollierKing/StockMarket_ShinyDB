### MA CROSS SERIES
######################
events = c("price_cross_9_up","price_cross_9_dn","price_cross_21_up","price_cross_21_dn","price_cross_50_up",
"price_cross_50_dn","ma9_cross_21_up","ma9_cross_21_dn","ma9_cross_50_up","ma9_cross_50_dn",
"ma21_cross_9_up","ma21_cross_9_dn","ma21_cross_50_up","ma21_cross_50_dn","ma50_cross_9_up",
"ma50_cross_9_dn","ma50_cross_21_up","ma50_cross_21_dn","macd_cross_up","macd_cross_dn")
# Drag down event counters per occurance
for(j in 1:length(events)){
event = events[j]
counter = 0
for (i in 1:nrow(input2)){
if(!is.na(input2[,event][i])){
counter = counter + 1
}
input2[,event][i] = counter
}
}
# Make table
event_summary <- as.data.frame(matrix(nrow=20,ncol=10))
colnames(event_summary) <- c("event",
"avg_farthest_return",
"avg_farthest_day",
"avg_recross_days",
"total_occurances",
"current_condition",
"date_last_event",
"days_since_event",
"return_since_event")
event_summary$date_last_event = as.Date(event_summary$date_last_event)
############################
# add columns
event_summary$event[1] = "price_cross_9_up"
event_summary$event[2] = "price_cross_9_dn"
event_summary$event[3] = "price_cross_21_up"
event_summary$event[4] = "price_cross_21_dn"
event_summary$event[5] = "price_cross_50_up"
event_summary$event[6] = "price_cross_50_dn"
event_summary$event[7] = "ma9_cross_21_up"
event_summary$event[8] = "ma9_cross_21_dn"
event_summary$event[9] = "ma9_cross_50_up"
event_summary$event[10] = "ma9_cross_50_dn"
event_summary$event[11] = "ma21_cross_9_up"
event_summary$event[12] = "ma21_cross_9_dn"
event_summary$event[13] = "ma21_cross_50_up"
event_summary$event[14] = "ma21_cross_50_dn"
event_summary$event[15] = "ma50_cross_9_up"
event_summary$event[16] = "ma50_cross_9_dn"
event_summary$event[17] = "ma50_cross_21_up"
event_summary$event[18] = "ma50_cross_21_dn"
event_summary$event[19] = "macd_cross_up"
event_summary$event[20] = "macd_cross_dn"
for(k in 1:nrow(event_summary)){
event = event_summary$event[k]
if(substr(event,nchar(event)-1,nchar(event))=="dn"){
# subset for rows with under condition
#####################
comp = substr(event,1,nchar(event)-3)
comp_tbl = input2 %>% filter_(paste(comp, "== 'under'"))
#####################
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(min_price = min(Close),
start_price = first(Close),
return = round((min_price-start_price)/start_price,4),
min_day = sum(which(Close == min_price)),
tot_days = n()) %>%
filter (return !=0) %>% # filter out erroneous crosses (where opposite cross happened)
summarise(total_occurances = n(),
avg_min_return = mean(return,na.rm=TRUE),
avg_min_day = mean(min_day),
avg_tot_days = mean(tot_days)) -> summ_tbl
} else {
# subset for rows with over condition
#####################
comp = substr(event,1,nchar(event)-3)
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'"))
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(Close),
start_price = first(Close),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(Close == max_price)),
tot_days = n()) %>%
filter (return !=0) %>% # filter out erroneous crosses (where opposite cross happened)
summarise(total_occurances = n(),
avg_max_return = mean(return,na.rm=TRUE),
avg_max_day = mean(max_day),
avg_tot_days = mean(tot_days)) -> summ_tbl
}
# create current condition summary
# current condition
curr_row = input2[nrow(input2),]
event_summary$current_condition[k] = curr_row %>% select_(comp)
event_count = curr_row %>% select_(event)
curr_dat = input2 %>% filter_(paste0(event,"==",event_count))
# days since event
days = nrow(curr_dat)
event_summary$date_last_event[k] = curr_dat$date[1]
event_summary$days_since_event[k] = days
# return since event
event_summary$return_since_event[k] = (curr_dat$Close[days] - curr_dat$Close[1])/curr_dat$Close[1]
#fill event_summary table
if(substr(event,nchar(event)-1,nchar(event))=="dn"){
event_summary$avg_farthest_return[k] = summ_tbl$avg_min_return
event_summary$avg_farthest_day[k] = summ_tbl$avg_min_day
} else {
event_summary$avg_farthest_return[k] = summ_tbl$avg_max_return
event_summary$avg_farthest_day[k] = summ_tbl$avg_max_day
}
event_summary$avg_recross_days[k] = summ_tbl$avg_tot_days
event_summary$total_occurances[k] = summ_tbl$total_occurances
}
event_summary$avg_farthest_return <- round(event_summary$avg_farthest_return,4)
event_summary$avg_farthest_day <- round(event_summary$avg_farthest_day,0)
event_summary$avg_recross_days <- round(event_summary$avg_recross_days,0)
event_summary$return_since_event <- round(event_summary$return_since_event,4)
event_summary[,10] <- NULL
event_summary %>% arrange(days_since_event) -> event_summary
event_summary
event <- "price_cross_21_up"
comp = substr(event,1,nchar(event)-3)
# comp_tbl = event_summ_all() %>% filter_(paste(comp, "== 'over'"))
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'")) #for debugging
comp_tbl$RSI_q_bins <- as.character(comp_tbl$RSI_q_bins)
comp_tbl$RSI_q_bins <- ifelse(is.na(comp_tbl$RSI_q_bins),"NULL",comp_tbl$RSI_q_bins)
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(Close),
start_price = first(Close),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(Close == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins),
date = first(date))  %>%
filter (return !=0) -> event_summ_tbl
# filter out erroneous crosses (where opposite cross happened)
event_summ_tbl[[event]] <- as.numeric(row.names(event_summ_tbl))
event_summ_tbl[[event]] <- as.factor(event_summ_tbl[[event]])
#compute mean & standard deviations (return)
return_mean <- mean(event_summ_tbl$return)
return_sd <- sd(event_summ_tbl$return)
#compute mean & standard deviations (days)
day_mean <- mean(event_summ_tbl$max_day)
day_sd <- sd(event_summ_tbl$max_day)
View(event_summ_tbl)
ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity",alpha = 0.7) + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +            scale_fill_manual(values= c("tomato1","orange", "gold2", "lightgreen","springgreen4","grey")) + xlab("") +ylab("") + theme(legend.position="none")
table(event_summ_tbl$rsi_q)
table(input$rsi_q)
table(input2$rsi_q)
View(input2)
table(input2$RSI_q_bins)
ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity",alpha = 0.7) + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_colour_manual(values = c("[0,0.2)" = "tomato1", "[0.2,0.4)" = "orange", "[0.4,0.6)" = "gold2", "[0.6,0.8)" = "lightgreen", "[0.8,1]" = "springgreen4"))
ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity",alpha = 0.7) + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(values = c("[0,0.2)" = "tomato1", "[0.2,0.4)" = "orange", "[0.4,0.6)" = "gold2", "[0.6,0.8)" = "lightgreen", "[0.8,1]" = "springgreen4"))
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank()) + background_grid(major = "xy",minor = "none")
## ADD TECHNICAL INDICATORS
if (nrow(input2[!is.na(input2$ma50),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma50),colour="green")
}
if (nrow(input2[!is.na(input2$ma21),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma21),color="red")
}
if (nrow(input2[!is.na(input2$ma9),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma9),colour="blue")
}
# if (nrow(input2[!is.na(input2$up),]) > 0){
#     p1 <- p1 + geom_line(aes(x=date,y=up),color="purple") +
#         geom_line(aes(x=date,y=dn),color="purple")
# }
#
#WIP
# Add
matches <- which(input2$date %in% event_summ_tbl$date)
#need to make matches a 2-column DF with the index in column 1 and quantile range in column 2
rsi_quantiles <- input2[matches,]
# rsi_quantiles$RSI_q_bins
# "tomato1","orange", "gold2", "lightgreen","springgreen4","grey"
# if(length(matches)>0){
if (nrow(rsi_quantiles)>0){
for (i in 1:nrow(rsi_quantiles)) {
if (is.na(rsi_quantiles$RSI_q_bins[i])){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='grey',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
} else if (rsi_quantiles$RSI_q_bins[i]=="[0,0.2)"){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='tomato1',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
} else if (rsi_quantiles$RSI_q_bins[i]=="[0.2,0.4)"){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='orange',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
} else if (rsi_quantiles$RSI_q_bins[i]=="[0.4,0.6)"){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='gold2',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
} else if (rsi_quantiles$RSI_q_bins[i]=="[0.6,0.8)"){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='lightgreen',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
} else if (rsi_quantiles$RSI_q_bins[i]=="[0.8,1]"){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='springgreen4',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
}
}
}
p1 <- ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank()) + background_grid(major = "xy",minor = "none")
## ADD TECHNICAL INDICATORS
if (nrow(input2[!is.na(input2$ma50),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma50),colour="green")
}
if (nrow(input2[!is.na(input2$ma21),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma21),color="red")
}
if (nrow(input2[!is.na(input2$ma9),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma9),colour="blue")
}
# if (nrow(input2[!is.na(input2$up),]) > 0){
#     p1 <- p1 + geom_line(aes(x=date,y=up),color="purple") +
#         geom_line(aes(x=date,y=dn),color="purple")
# }
#
#WIP
# Add
matches <- which(input2$date %in% event_summ_tbl$date)
#need to make matches a 2-column DF with the index in column 1 and quantile range in column 2
rsi_quantiles <- input2[matches,]
# rsi_quantiles$RSI_q_bins
# "tomato1","orange", "gold2", "lightgreen","springgreen4","grey"
# if(length(matches)>0){
if (nrow(rsi_quantiles)>0){
for (i in 1:nrow(rsi_quantiles)) {
if (is.na(rsi_quantiles$RSI_q_bins[i])){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='grey',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
} else if (rsi_quantiles$RSI_q_bins[i]=="[0,0.2)"){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='tomato1',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
} else if (rsi_quantiles$RSI_q_bins[i]=="[0.2,0.4)"){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='orange',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
} else if (rsi_quantiles$RSI_q_bins[i]=="[0.4,0.6)"){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='gold2',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
} else if (rsi_quantiles$RSI_q_bins[i]=="[0.6,0.8)"){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='lightgreen',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
} else if (rsi_quantiles$RSI_q_bins[i]=="[0.8,1]"){
loop_input <- paste("geom_vline(xintercept=rsi_quantiles$date[",i,
"],color='springgreen4',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
}
}
}
p1
?axis.ticks.x
?axis.ticks
?axis.ticks.length
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks.length=unit(1)) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks.length=unit(1,"%b")) + background_grid(major = "xy",minor = "none")
?units
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks.length=unit(1,"months")) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks.length=unit(1,"month")) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks.length=units("days")) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks.length=units(1,"days")) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks.length=units(1,1)) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks.length=units(1)) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks.length) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks.length=1) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks = element_line(size = 2)) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks = element_line(size = 10)) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),
axis.ticks.length = unit(.25, "cm")) + background_grid(major = "xy",minor = "none")
ggplot(input2, aes(x=date, ymin=Low, ymax=High, lower=pmin(Open,Close), upper=pmax(Open,Close), fill=pos_neg, group=1, middle=pmin(Open,Close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank()) + background_grid(major = "xy",minor = "none")
grid.arrange(g1,g2,p1,widths=c(1/6,1/6,2/3))
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity",alpha = 0.7) + ggtitle("Max_Return") + coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) + scale_fill_manual(values = c("[0,0.2)" = "tomato1", "[0.2,0.4)" = "orange", "[0.4,0.6)" = "gold2", "[0.6,0.8)" = "lightgreen", "[0.8,1]" = "springgreen4")) + xlab("") +ylab("") + theme(legend.position="none")
g2 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = max_day, fill=rsi_q)) +
geom_bar(stat = "identity",alpha = 0.7) + ggtitle("Max_Days") + coord_flip() + scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) + scale_fill_manual(values = c("[0,0.2)" = "tomato1", "[0.2,0.4)" = "orange", "[0.4,0.6)" = "gold2", "[0.6,0.8)" = "lightgreen", "[0.8,1]" = "springgreen4")) + xlab("") +ylab("") + theme(legend.position="right")
grid.arrange(g1,g2,p1,widths=c(1/6,1/6,2/3))
ggplot() +
geom_line(data=input2,aes(x=date,y=macd,color="red")) +
geom_line(data=input2,aes(x=date,y=signal,color="blue")) +
scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y")) + guides(color=FALSE) + xlab("") + theme(axis.title.x = element_blank(),axis.text.x = element_blank()) + ylab("MACD") + background_grid(major = "xy",minor = "none")
?grid.arrange
grid.arrange(g1,g2,(p1,p2),widths=c(1/6,1/6,2/3),heights=c(1,1,(2/3,1/3)))
grid.arrange(g1,g2,p1,p2,widths=c(1/6,1/6,2/3))
p2 <- ggplot() +
geom_line(data=input2,aes(x=date,y=macd,color="red")) +
geom_line(data=input2,aes(x=date,y=signal,color="blue")) +
scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y")) + guides(color=FALSE) + xlab("") + theme(axis.title.x = element_blank(),axis.text.x = element_blank()) + ylab("MACD") + background_grid(major = "xy",minor = "none")
grid.arrange(g1,g2,p1,p2,widths=c(1/6,1/6,2/3))
grid.arrange(g1,g2,p1,p2),widths=c(1/6,1/6,2/3)
p_test <- grid.arrange(p1,p2,heights=c(2/3,1/3))
p_test
p_test
grid.arrange(g1,g2,p_test,widths=c(1/6,1/6,2/3))
p_test <- grid.arrange(p1,p2,heights=c(3/4,1/4),align='v')
grid.arrange(p1,p2,heights=c(3/4,1/4),align='v')
p1
p2
p_test <- grid.arrange(p1,p2,heights=c(3/4,1/4))
p_test <- plot_grid(p1,p2,ncol=1,align='v', rel_heights = c(.75,.25))
grid.arrange(g1,g2,p_test,widths=c(1/6,1/6,2/3))
p2 <- ggplot() +
geom_line(data=input2,aes(x=date,y=macd,color="red")) +
geom_line(data=input2,aes(x=date,y=signal,color="blue")) +
scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y")) + guides(color=FALSE) + xlab("") + ylab("") + theme(axis.title.x = element_blank(),axis.text.x = element_blank()) + ggtitle("MACD") + background_grid(major = "xy",minor = "none")
# p_test <- grid.arrange(p1,p2,heights=c(3/4,1/4))
p_test <- plot_grid(p1,p2,ncol=1,align='v', rel_heights = c(.75,.25))
grid.arrange(g1,g2,p_test,widths=c(1/6,1/6,2/3))
library(tidyquant)
aapl_fins <- tq_get("AAPL",get="financials")
View(aapl_fins)
aapl_fins %>% filter(type=="IS") %>% select (quarter) %>% unnest()
x <- aapl_fins %>% filter(type=="IS") %>% select (quarter) %>% unnest()
View(x)
x <- aapl_fins %>% filter(type=="CF") %>% select (quarter) %>% unnest()
x %>% spread(date,value)
aapl_fins %>%
filter(type=="IS") %>%
select (quarter) %>%
unnest() %>%
spread(date,value)
View(x)
View(x)
aapl_fins %>% filter(type=="IS") %>% select (annual) %>% unnest()
aapl_key_ratios <- tq_get("AAPL", get = "key.ratios")
View(aapl_key_ratios)
aapl_key_ratios %>%
filter(section == "Valuation Ratios") %>%
unnest()
aapl_key_ratios %>%
filter(section == "Valuation Ratios") %>%
%>% select (annual) %>% unnest()
aapl_key_ratios %>%
filter(section == "Valuation Ratios") %>%
select (annual) %>% unnest()
aapl_key_ratios
aapl_key_ratios[1]
aapl_key_ratios[2]
aapl_key_ratios[[2]]
aapl_key_ratios[[4]]
aapl_key_ratios[[1]]
tbl_ratios_all <- tq_get(ticker,get="key.ratios")
ticker <- 'AAPL'
tbl_ratios_all <- tq_get(ticker,get="key.ratios")
tbl_ratios_all
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
# select (quarter) %>%
# select (input$reporting_per) %>%
unnest() %>%
spread(date,value)
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
# select (quarter) %>%
# select (input$reporting_per) %>%
unnest() %>%
spread(date,value) -> test
View(test)
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
# select (quarter) %>%
# select (input$reporting_per) %>%
unnest() %>%
spread(date,value) %>%
select (-section,-sub.section,-group)
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
# select (quarter) %>%
# select (input$reporting_per) %>%
unnest() %>%
spread(date,value) %>%
select (-section,-sub.section,-group) -> test
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest()
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() -> x
View(x)
tbl_ratios_all %>%
filter(section=="Growth") %>%
unnest()
tbl_ratios_all %>%
filter(section=="Growth") %>%
unnest() %>%
spread(date,value) %>%
select (-section,-group)
tbl_ratios_all %>%
filter(section=="Financials") %>%
unnest()
tbl_ratios_all %>%
filter(section=="Profitability") %>%
unnest()
tbl_ratios_all %>%
filter(section=="Growth") %>%
unnest()
tbl_ratios_all %>%
filter(section=="Cash Flow") %>%
unnest()
tbl_ratios_all %>%
filter(section=="Financial Health") %>%
unnest()
tbl_ratios_all %>%
filter(section=="Efficiency Ratios") %>%
unnest()
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest()
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2))
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2)) %>%
spread(date,value)
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2)) %>%
spread(date,value) %>%
select (-section,-sub.section,-group)
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2)) %>%
spread(date,value) %>%
select (-section,-sub.section,-group) -> x
View(x)
ticker <- "PANW"
tbl_ratios_all <- tq_get(ticker,get="key.ratios")
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest()
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2)) %>%
spread(date,value) %>%
select (-section,-sub.section,-group) -> x
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2)) %>%
spread(date,value)
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2))
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2)) -> x
View(x)
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2)) %>%
na.omit()-> x
View(x)
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2)) %>%
na.omit() %>%
spread(date,value) %>%
select (-section,-sub.section,-group) -> x
View(x)
View(tbl_ratios_all)
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2))
tbl_ratios_all %>%
filter(section=="Valuation Ratios") %>%
unnest() %>%
mutate(value =round(value,2)) -> x
ticker <- "R"
tbl_ratios_all <- tq_get(ticker,get="key.ratios")
tbl_ratios_all
