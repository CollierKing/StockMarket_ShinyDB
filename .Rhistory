comp_tbl = input2 %>% filter_(paste(comp, "== 'under'")) #for debugging
comp_tbl$RSI_q_bins <- as.character(comp_tbl$RSI_q_bins)
comp_tbl$RSI_q_bins <- ifelse(is.na(comp_tbl$RSI_q_bins),"NULL",comp_tbl$RSI_q_bins)
#####################
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(min_price = min(adjusted),
start_price = first(adjusted),
return = round((min_price-start_price)/start_price,4),
min_day = sum(which(adjusted == min_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins)) %>%
filter (return !=0) -> event_summ_tbl
# filter out erroneous crosses (where opposite cross happened)
event_summ_tbl[[event]] <- as.numeric(row.names(event_summ_tbl))
event_summ_tbl[[event]] <- as.factor(event_summ_tbl[[event]])
#compute mean & standard deviations (return)
return_mean <- mean(event_summ_tbl$return)
return_sd <- sd(event_summ_tbl$return)
#compute mean & standard deviations (days)
day_mean <- mean(event_summ_tbl$min_day)
day_sd <- sd(event_summ_tbl$min_day)
comp_tbl = input2 %>% filter_(paste(comp, "== 'under'")) #for debugging
event <- "macd_cross_up"
comp = substr(event,1,nchar(event)-3)
comp_tbl = input2 %>% filter_(paste(comp, "== 'under'")) #for debugging
comp_tbl$RSI_q_bins <- as.character(comp_tbl$RSI_q_bins)
comp_tbl$RSI_q_bins <- ifelse(is.na(comp_tbl$RSI_q_bins),"NULL",comp_tbl$RSI_q_bins)
comp_tbl %>% group_by_(event) %>%
summarise(min_price = min(adjusted),
start_price = first(adjusted),
return = round((min_price-start_price)/start_price,4),
min_day = sum(which(adjusted == min_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins)) %>%
filter (return !=0) -> event_summ_tbl
event_summ_tbl[[event]] <- as.numeric(row.names(event_summ_tbl))
event_summ_tbl[[event]] <- as.factor(event_summ_tbl[[event]])
#compute mean & standard deviations (return)
return_mean <- mean(event_summ_tbl$return)
return_sd <- sd(event_summ_tbl$return)
#compute mean & standard deviations (days)
day_mean <- mean(event_summ_tbl$min_day)
day_sd <- sd(event_summ_tbl$min_day)
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
# theme(
# axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
# plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() +
# theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_colour_manual(name = 'the colour',
values =c('black'='black','red'='red'), labels = c('c2','c1'))
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
# theme(
# axis.title.x = element_blank(),
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
# plot.margin = unit(c(1,-1,1,0), "mm")) +
coord_flip() +
# theme(panel.grid.minor = element_line(colour="blue", size=0.5)) +
scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
# scale_colour_manual(name = 'the colour',
# values =c('black'='black','red'='red'), labels = c('c2','c1'))
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","grey"))
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","grey"))
g1
comp = substr(event,1,nchar(event)-3)
comp = substr(event,1,nchar(event)-3)
# comp_tbl = event_summ_all() %>% filter_(paste(comp, "== 'under'"))
comp_tbl = input2 %>% filter_(paste(comp, "== 'under'")) #for debugging
comp_tbl$RSI_q_bins <- as.character(comp_tbl$RSI_q_bins)
comp_tbl$RSI_q_bins <- ifelse(is.na(comp_tbl$RSI_q_bins),"NULL",comp_tbl$RSI_q_bins)
#####################
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(min_price = min(adjusted),
start_price = first(adjusted),
return = round((min_price-start_price)/start_price,4),
min_day = sum(which(adjusted == min_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins)) %>%
filter (return !=0) -> event_summ_tbl
# filter out erroneous crosses (where opposite cross happened)
event_summ_tbl[[event]] <- as.numeric(row.names(event_summ_tbl))
event_summ_tbl[[event]] <- as.factor(event_summ_tbl[[event]])
#compute mean & standard deviations (return)
return_mean <- mean(event_summ_tbl$return)
return_sd <- sd(event_summ_tbl$return)
#compute mean & standard deviations (days)
day_mean <- mean(event_summ_tbl$min_day)
day_sd <- sd(event_summ_tbl$min_day)
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","grey"))
g1
View(event_summ_tbl)
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +
scale_fill_manual(breaks=c("\\[0,0.2)", "\\[0.2,0.4)", "\\[0.4,0.6)",
"\\[0.6,0.8)", "\\[0.8,1.0)"),
values = c("tomato1","orange", "gold2", "lightgreen","springgreen4","grey"))
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1])))
g
g1
alette1 <- c('red','green','blue','violet','black')
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) + + scale_colour_manual(values=Palette1)
Palette1 <- c('red','green','blue','violet','black')
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) + + scale_colour_manual(values=Palette1)
Palette1 <- c('red','green','blue','violet','black')
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +  scale_colour_manual(values=Palette1)
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +  scale_colour_manual(rsi_q=Palette1)
Palette1 <- c('red','green','blue','violet','black')
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +  scale_colour_manual(rsi_q=Palette1)
Palette1 <- c('red','green','blue','violet','black')
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +  scale_colour_manual(values=Palette1)
g1
Palette1 <- c('red','orange','yellow','green','black')
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +  scale_colour_manual(values=Palette1)
g1
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=factor(rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +  scale_colour_manual(values=Palette1)
g1
Palette1 <- c('red','orange','yellow','green','black')
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=factor(rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +  scale_colour_manual(values=Palette1)
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=factor(rsi_q))) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +  scale_colour_manual(values=Palette1)
g1
?scale_color_manual
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity",aes(colour = factor(rsi_q))) + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +  scale_colour_manual(values=Palette1)
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity",aes(colour = factor(rsi_q))) + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1])))
g1
g1 <- ggplot(data = event_summ_tbl, aes(x = event_summ_tbl[,1], y = return,fill=rsi_q)) +
geom_bar(stat = "identity") + ggtitle("Max_Return") +
coord_flip() +  scale_x_discrete(limits = rev(levels(event_summ_tbl[,1]))) +            scale_fill_manual(values= c("tomato1","orange", "gold2", "lightgreen","springgreen4","grey"))
g1
View(event_summ_tbl)
View(input2)
View(activity2)
View(input2)
event <- "macd_cross_up"
comp = substr(event,1,nchar(event)-3)
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'")) #for debugging
comp_tbl$RSI_q_bins <- as.character(comp_tbl$RSI_q_bins)
comp_tbl$RSI_q_bins <- ifelse(is.na(comp_tbl$RSI_q_bins),"NULL",comp_tbl$RSI_q_bins)
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins),
date = first(date))  %>%
filter (return !=0) -> event_summ_tbl
# filter out erroneous crosses (where opposite cross happened)
event_summ_tbl[[event]] <- as.numeric(row.names(event_summ_tbl))
event_summ_tbl[[event]] <- as.factor(event_summ_tbl[[event]])
#compute mean & standard deviations (return)
return_mean <- mean(event_summ_tbl$return)
return_sd <- sd(event_summ_tbl$return)
#compute mean & standard deviations (days)
day_mean <- mean(event_summ_tbl$max_day)
day_sd <- sd(event_summ_tbl$max_day)
View(event_summ_tbl)
p1 <- ggplot(input2, aes(x=date, ymin=low, ymax=high, lower=pmin(open,close), upper=pmax(open,close), fill=pos_neg, group=1, middle=pmin(open,close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),axis.text.x = element_blank()) + background_grid(major = "xy",minor = "none")
## ADD TECHNICAL INDICATORS
if (nrow(input2[!is.na(input2$ma50),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma50),colour="green")
}
if (nrow(input2[!is.na(input2$ma21),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma21),color="red")
}
if (nrow(input2[!is.na(input2$ma9),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma9),colour="blue")
}
matches <- which(input2$date %in% event_summ_tbl[,c("date")])
event_summ_tbl[,c("date")]
input2$date
View(input2)
input <- tq_get(ticker, get = "stock.prices", from = start, to = end)
input <- input[!is.na(input$adjusted),]
#reformat for weekly time frame
input <- tq_get(ticker, get = "stock.prices", from = start, to = end)
mondays = as.POSIXlt(input$date)$wday == 1
tuesdays = as.POSIXlt(input$date)$wday == 2
wednesdays = as.POSIXlt(input$date)$wday == 3
thursdays = as.POSIXlt(input$date)$wday == 4
fridays = as.POSIXlt(input$date)$wday == 5
indx_mondays <- c(0, which(mondays))
indx_tuesdays <- c(0, which(tuesdays))
indx_wednesdays <- c(0, which(wednesdays))
indx_thursdays <- c(0, which(thursdays))
indx_fridays <- c(0, which(fridays))
open <- input[,1]
open$index = 1:nrow(open)
input$mondays <- indx_mondays[match(open$index,indx_mondays)]
input$tuesdays <- indx_tuesdays[match(open$index,indx_tuesdays)]
input$wednesdays <- indx_wednesdays[match(open$index,indx_wednesdays)]
input$thursdays <- indx_thursdays[match(open$index,indx_thursdays)]
input$fridays <- indx_fridays[match(open$index,indx_fridays)]
input$weekday <- ifelse(!is.na(input$mondays),1,
ifelse(!is.na(input$tuesdays),2,
ifelse(!is.na(input$wednesdays),3,
ifelse(!is.na(input$thursdays),4,
ifelse(!is.na(input$fridays),5,NA)))))
input$week_num <- NA
week = 0
try(for (i in 1:nrow(input)){
if(input$weekday[i]>input$weekday[i+1]){
week = week + 1
input$week_num[i+1] <- week
}  else {
input$week_num[i+1] <- week
}
},silent=FALSE)
#patch up
input$week_num[1] <- input$week_num[2]
input %>% group_by(week_num) %>%
summarise(
size = n(),
date = first(date),
open = first(open),
low = min(low),
high = max(high),
close = last(close),
adjusted = last(adjusted),
volume = sum(volume)
) -> input
}
#add technical indicators
try(input$ma50 <- SMA(input$adjusted,50),silent=TRUE)
try(input$ma21 <- SMA(input$adjusted,21),silent=TRUE)
try(input$ma9 <- SMA(input$adjusted,9),silent=TRUE)
try(bbands <- as.data.frame(BBands(input$adjusted, n=20,sd=2)),silent=TRUE)
# try(bbands <- bbands[,c("up","dn")],silent = TRUE)
# try(colnames(bbands) <- c("bb_up","bb_dn"))
# try(input <- cbind(input,bbands),silent = TRUE)
try(input$RSI <- RSI(input$adjusted))
try(macd <- as.data.frame(MACD(input$adjusted)))
try(input <- cbind(input,macd),silent = TRUE)
try(input$macd_delt <- input$macd-input$signal)
try(input$pos_neg <- ifelse(input$adjusted>lag(input$adjusted,1),"red","green"),silent=TRUE)
input2 = input
### MA CROSS FLAGS
######################
#Price vs MAs
## Above 9 sma Cross
input2$price_cross_9_up <- ifelse(input2$adjusted>input2$ma9 &
lag(input2$adjusted,n=1) < lag(input2$ma9,n=1),1,NA)
## Below 9 sma Cross
input2$price_cross_9_dn <- ifelse(input2$adjusted<input2$ma9 &
lag(input2$adjusted,n=1) > lag(input2$ma9,n=1),1,NA)
# price vs 9 ma
input2$price_cross_9 <- ifelse(input2$adjusted<input2$ma9,"under","over")
## Above 21 sma Cross
input2$price_cross_21_up <- ifelse(input2$adjusted>input2$ma21 &
lag(input2$adjusted,n=1) < lag(input2$ma21,n=1),1,NA)
## Below 21 sma Cross
input2$price_cross_21_dn <- ifelse(input2$adjusted<input2$ma21 &
lag(input2$adjusted,n=1) > lag(input2$ma21,n=1),1,NA)
# price vs 21 ma
input2$price_cross_21 <- ifelse(input2$adjusted<input2$ma21,"under","over")
## Above 50 sma Cross
input2$price_cross_50_up <- ifelse(input2$adjusted>input2$ma50 &
lag(input2$adjusted,n=1) < lag(input2$ma50,n=1),1,NA)
## Below 50 sma Cross
input2$price_cross_50_dn <- ifelse(input2$adjusted<input2$ma50 &
lag(input2$adjusted,n=1) > lag(input2$ma50,n=1),1,NA)
# price vs 50 ma
input2$price_cross_50 <- ifelse(input2$adjusted<input2$ma50,"under","over")
# 9 vs MAs
## Above 21 sma Cross
input2$ma9_cross_21_up <- ifelse(input2$ma9>input2$ma21 & lag(input2$ma9,n=1) < lag(input2$ma21,n=1),1,NA)
## Below 21 sma Cross
input2$ma9_cross_21_dn <- ifelse(input2$ma9<input2$ma21 & lag(input2$ma9,n=1) > lag(input2$ma21,n=1),1,NA)
# 9 vs 21 ma
input2$ma9_cross_21 <- ifelse(input2$ma9<input2$ma21,"under","over")
## Above 50 sma Cross
input2$ma9_cross_50_up <- ifelse(input2$ma9>input2$ma50 & lag(input2$ma9,n=1) < lag(input2$ma50,n=1),1,NA)
## Below 50 sma Cross
input2$ma9_cross_50_dn <- ifelse(input2$ma9<input2$ma50 & lag(input2$ma9,n=1) > lag(input2$ma50,n=1),1,NA)
# 9 vs 50 ma
input2$ma9_cross_50 <- ifelse(input2$ma9<input2$ma50,"under","over")
# 21 vs MAs
## Above 9 sma Cross
input2$ma21_cross_9_up <- ifelse(input2$ma21>input2$ma9 & lag(input2$ma21,n=1) < lag(input2$ma9,n=1),1,NA)
## Below 9 sma Cross
input2$ma21_cross_9_dn <- ifelse(input2$ma21<input2$ma9 & lag(input2$ma21,n=1) > lag(input2$ma9,n=1),1,NA)
# 21 vs 9 ma
input2$ma21_cross_9 <- ifelse(input2$ma21<input2$ma9,"under","over")
## Above 50 sma Cross
input2$ma21_cross_50_up <- ifelse(input2$ma21>input2$ma50 & lag(input2$ma21,n=1) < lag(input2$ma50,n=1),1,NA)
## Below 50 sma Cross
input2$ma21_cross_50_dn <- ifelse(input2$ma21<input2$ma50 & lag(input2$ma21,n=1) > lag(input2$ma50,n=1),1,NA)
# 21 vs 50 ma
input2$ma21_cross_50 <- ifelse(input2$ma21<input2$ma50,"under","over")
# 50 vs MAs
## Above 9 sma Cross
input2$ma50_cross_9_up <- ifelse(input2$ma50>input2$ma9 & lag(input2$ma50,n=1) < lag(input2$ma9,n=1),1,NA)
## Below 9 sma Cross
input2$ma50_cross_9_dn <- ifelse(input2$ma50<input2$ma9 & lag(input2$ma50,n=1) > lag(input2$ma9,n=1),1,NA)
# 50 vs 9 ma
input2$ma50_cross_9 <- ifelse(input2$ma50<input2$ma9,"under","over")
## Above 21 sma Cross
input2$ma50_cross_21_up <- ifelse(input2$ma50>input2$ma21 & lag(input2$ma50,n=1) < lag(input2$ma21,n=1),1,NA)
## Below 21 sma Cross
input2$ma50_cross_21_dn <- ifelse(input2$ma50<input2$ma21 & lag(input2$ma50,n=1) > lag(input2$ma21,n=1),1,NA)
# 50 vs 21 ma
input2$ma50_cross_21 <- ifelse(input2$ma50<input2$ma21,"under","over")
#MACD cross
input2$macd_cross_up <- ifelse(input2$macd>input2$signal & lag(input2$macd,n=1) < lag(input2$signal,n=1),1,NA)
input2$macd_cross_dn <- ifelse(input2$macd<input2$signal & lag(input2$macd,n=1) > lag(input2$signal,n=1),1,NA)
input2$macd_cross <- ifelse(input2$macd<input2$signal,"under","over")
#RSI Quantile
perc.rank <- function(x) trunc(rank(x,na.last = NA))/sum(!is.na(x))
xr <- perc.rank((input2$RSI))
xr_add <- rep(NA,nrow(input2)-length(xr))
xr <- c(xr_add,xr)
input2$RSI_q <- xr
q_cuts <- seq(0,1,.2)
input2$RSI_q_bins <- cut(input2$RSI_q,q_cuts,right=FALSE,include.lowest = TRUE)
### MA CROSS SERIES
######################
events = c("price_cross_9_up","price_cross_9_dn","price_cross_21_up","price_cross_21_dn","price_cross_50_up",
"price_cross_50_dn","ma9_cross_21_up","ma9_cross_21_dn","ma9_cross_50_up","ma9_cross_50_dn",
"ma21_cross_9_up","ma21_cross_9_dn","ma21_cross_50_up","ma21_cross_50_dn","ma50_cross_9_up",
"ma50_cross_9_dn","ma50_cross_21_up","ma50_cross_21_dn","macd_cross_up","macd_cross_dn")
# Drag down event counters per occurance
for(j in 1:length(events)){
event = events[j]
counter = 0
for (i in 1:nrow(input2)){
if(!is.na(input2[,event][i])){
counter = counter + 1
}
input2[,event][i] = counter
}
}
input2
comp = substr(event,1,nchar(event)-3)
comp_tbl = event_summ_all() %>% filter_(paste(comp, "== 'under'"))
comp = substr(event,1,nchar(event)-3)
comp_tbl = input2 %>% filter_(paste(comp, "== 'over'")) #for debugging
comp_tbl$RSI_q_bins <- as.character(comp_tbl$RSI_q_bins)
comp_tbl$RSI_q_bins <- ifelse(is.na(comp_tbl$RSI_q_bins),"NULL",comp_tbl$RSI_q_bins)
# create historical event_summary statistics from subset
#####################
comp_tbl %>% group_by_(event) %>%
summarise(max_price = max(adjusted),
start_price = first(adjusted),
return = round((max_price-start_price)/start_price,4),
max_day = sum(which(adjusted == max_price)),
tot_days = n(),
rsi_q = first(RSI_q_bins),
date = first(date))  %>%
filter (return !=0) -> event_summ_tbl
# filter out erroneous crosses (where opposite cross happened)
event_summ_tbl[[event]] <- as.numeric(row.names(event_summ_tbl))
event_summ_tbl[[event]] <- as.factor(event_summ_tbl[[event]])
#compute mean & standard deviations (return)
return_mean <- mean(event_summ_tbl$return)
return_sd <- sd(event_summ_tbl$return)
#compute mean & standard deviations (days)
day_mean <- mean(event_summ_tbl$max_day)
day_sd <- sd(event_summ_tbl$max_day)
matches <- which(input2$date %in% event_summ_tbl[,c("date")])
input2$date
event_summ_tbl[,c("date")
event_summ_tbl[,c("date")]
str(event_summ_tbl)
View(input2)
"2014-03-31" %in% input2$date
View(input2)
str(input2)
event_summ_tbl[,c("date")] <- as.Date(event_summ_tbl[,c("date")])
event_summ_tbl[,c("date")] <- as.date(event_summ_tbl[,c("date")])
View(event_summ_tbl)
event_summ_tbl[,c("date")] <- as.Date(event_summ_tbl[,c("date")])
event_summ_tbl$date <- as.Date(event_summ_tbl$date)
matches <- which(input2$date %in% event_summ_tbl[,c("date")])
matches <- which(input2$date %in% event_summ_tbl$date])
matches <- which(input2$date %in% event_summ_tbl$date)
if(length(matches)>0){
for (i in 1:length(matches)) {
loop_input <- paste("geom_vline(xintercept=input$date[",matches[i],
"],color='blue',,size=2,linetype='dotted')", sep="")
p1 <- p1 + eval(parse(text=loop_input))
}
}
p1
p1 <- ggplot(input2, aes(x=date, ymin=low, ymax=high, lower=pmin(open,close), upper=pmax(open,close), fill=pos_neg, group=1, middle=pmin(open,close))) + geom_boxplot(stat='identity') + xlab('') + ylab('') + theme(legend.position='none',axis.title.x = element_blank()) + scale_x_bd(business.dates=input2$date, max.major.breaks=10, labels=date_format("%b '%y"))  + ylab("") + xlab("") + theme(axis.title.x = element_blank(),axis.text.x = element_blank()) + background_grid(major = "xy",minor = "none")
## ADD TECHNICAL INDICATORS
if (nrow(input2[!is.na(input2$ma50),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma50),colour="green")
}
if (nrow(input2[!is.na(input2$ma21),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma21),color="red")
}
if (nrow(input2[!is.na(input2$ma9),]) > 0){
p1 <- p1 + geom_line(aes(x=date,y=ma9),colour="blue")
}
# if (nrow(input2[!is.na(input2$up),]) > 0){
#     p1 <- p1 + geom_line(aes(x=date,y=up),color="purple") +
#         geom_line(aes(x=date,y=dn),color="purple")
# }
#
#WIP
# Add
matches <- which(input2$date %in% event_summ_tbl$date)
if(length(matches)>0){
for (i in 1:length(matches)) {
loop_input <- paste("geom_vline(xintercept=input$date[",matches[i],
"],color='blue',,size=1)", sep="")
p1 <- p1 + eval(parse(text=loop_input))
}
}
p1
View(input2)
library(quantmod)
stockPrice <- getQuote("COP", what = yahooQuote.EOD)
View(stockPrice)
?getQuote
stockPrice <- getQuote("COP")
stockPrice <- getSymbols("COP")
getSymbols("COP")
View(COP)
getSymbols("COP",src = "Google")
getSymbols("COP",src = "GOOG")
getSymbols("COP",adjustOHLC())
getSymbols("COP")
adjustOHLC("COP")
adjustOHLC(COP)
cop <- adjustOHLC(COP)
View(cop)
cop <- adjustOHLC(COP,use.Adjusted = TRUE)
View(cop)
cop <- adjustOHLC(COP,use.Adjusted = FALSE)
install.packages("QuantTools")
library(QuantTools)
from = '2013-01-01'
to = '2017-08-09'
symbol = 'COP'
get_iqfeed_data(symbol,from,to)
get_iqfeed_data(symbol,from,to,period = 'day')
getSymbols.google("COP")
getSymbols.google("COP",env = .GlobalEnv)
View(COP)
aapl_financials <- tq_get("AAPL", get = "financials")
View(aapl_financials)
aapl_financials %>%
filter(type == "IS") %>%
select(annual) %>%
unnest()
aapl_financials %>%
filter(type == "IS") %>%
select(quarterly) %>%
unnest()
aapl_financials %>%
filter(type == "IS") %>%
select(quarter) %>%
unnest()
?tq_get
